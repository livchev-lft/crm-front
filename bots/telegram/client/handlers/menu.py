from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bots.telegram.async_requests.client_async_requests import check_client_car, check_apps, check_cars, check_car_app
from bots.telegram.client.fsm import EditCar, CreateApp
from bots.telegram.client.handlers.app import process_chosen_car
from bots.telegram.client.kb import choose_car, get_delete_car_keyboard, client_add_car, client_edit_car

router = Router()

@router.message(F.text=="üöó –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
async def my_cars(message: Message, state: FSMContext):
    client_id = message.from_user.id
    cars = await check_cars(client_id)
    if cars:
        await state.set_state(EditCar.check)
        await message.answer("–í–∞—à–∏ –º–∞—à–∏–Ω—ã:", reply_markup=client_edit_car)
        for car in cars:
            text = (
                f"üöó <b>–ú–∞—à–∏–Ω–∞</b>\n"
                f"<b>–ú–∞—Ä–∫–∞:</b> {car['brand']}\n"
                f"<b>–ú–æ–¥–µ–ª—å:</b> {car['model']}\n"
                f"<b>–ù–æ–º–µ—Ä:</b> {car['number']}\n"
                f"<b>–ì–æ–¥:</b> {car['year']}"
            )
            keyboard = get_delete_car_keyboard(car['id'])
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—à–∏–Ω, —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=client_add_car)

@router.message(F.text=="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def create_app(message: Message, state: FSMContext):
    client_id = message.from_user.id
    cars = await check_cars(client_id)
    apps = await check_apps(client_id)
    if len(cars) == 1:
        if apps:
            await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞!\n"
                                 f"\n"
                                 f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –º–∞—à–∏–Ω—É\n")
            return
        await process_chosen_car(message, cars[0], state)
    elif len(cars) > 1:
        await state.set_state(CreateApp.choose_car)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É")
        for car in cars:
            result = await check_car_app(car['id'])
            if result:
                text = (
                    f"–ó–∞—è–≤–∫–∞ —É–∂–µ –µ—Å—Ç—å‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è\n"
                    f"üöó <b>–ú–∞—à–∏–Ω–∞</b>\n"
                    f"<b>–ú–∞—Ä–∫–∞:</b> {car['brand']}\n"
                    f"<b>–ú–æ–¥–µ–ª—å:</b> {car['model']}\n"
                    f"<b>–ù–æ–º–µ—Ä:</b> {car['number']}\n"
                    f"<b>–ì–æ–¥:</b> {car['year']}"
                )
                await message.answer(text, parse_mode="HTML")
            else:
                text = (
                    f"üöó <b>–ú–∞—à–∏–Ω–∞</b>\n"
                    f"<b>–ú–∞—Ä–∫–∞:</b> {car['brand']}\n"
                    f"<b>–ú–æ–¥–µ–ª—å:</b> {car['model']}\n"
                    f"<b>–ù–æ–º–µ—Ä:</b> {car['number']}\n"
                    f"<b>–ì–æ–¥:</b> {car['year']}"
                )
                keyboard = choose_car(car['id'])
                await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω", reply_markup=client_add_car)


@router.message(F.text=="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_apps(message: Message, state: FSMContext):
    client_id = message.from_user.id
    apps = await check_apps(client_id)
    if apps:
        for app in apps:
            car = await check_client_car(app['car_id'])
            text = (
                f"–ó–∞—è–≤–∫–∞ N{app['id']}\n"
                f"\n"
                f"üöó –ú–∞—à–∏–Ω–∞:\n"
                f"–ú–∞—Ä–∫–∞: {car['brand']}\n"
                f"–ú–æ–¥–µ–ª—å: {car['model']}\n"
                f"–ù–æ–º–µ—Ä: {car['number']}\n"
                f"–ì–æ–¥: {car['year']}\n"
                f"\n"
                f"üìã –ü—Ä–æ–±–ª–µ–º–∞:\n"
                f"{app['problem']}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç\n"
            )
            await message.answer(text, parse_mode="HTML")
    if not apps:
        await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç")
    else:
        await message.answer("–æ—à–∏–±–∫–∞")
