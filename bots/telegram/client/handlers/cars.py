import re

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter

from bots.telegram.async_requests.client_async_requests import delete_car_request, add_car_request
from bots.telegram.client.kb import menu_button, client_start_menu
from bots.telegram.client.handlers.menu import EditCar
from bots.telegram.client.fsm import AddCar
router = Router()

@router.callback_query(F.data == "add_car")
async def add_car_callback(call: CallbackQuery, state: FSMContext):
    client_id = call.from_user.id
    await state.update_data(client_id=client_id)
    await state.set_state(AddCar.brand)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=menu_button)

@router.message(F.text=="üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
async def add_car_message(message: Message, state: FSMContext):
    client_id = message.from_user.id
    await state.update_data(client_id=client_id)
    await state.set_state(AddCar.brand)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=menu_button)

@router.message(AddCar.brand)
async def add_car_model(message: Message, state: FSMContext):
    if message.text == "–í –º–µ–Ω—é":
        await go_menu(message, state)
        return
    brand = message.text
    await state.update_data(brand=brand)
    await state.set_state(AddCar.model)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã")

@router.message(AddCar.model)
async def add_car_number(message: Message, state: FSMContext):
    if message.text == "–í –º–µ–Ω—é":
        await go_menu(message, state)
        return
    model = message.text
    await state.update_data(model=model)
    await state.set_state(AddCar.number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã")

@router.message(AddCar.number)
async def add_car_year(message: Message, state: FSMContext):
    if message.text == "–í –º–µ–Ω—é":
        await go_menu(message, state)
        return
    number = message.text.strip()
    if not re.fullmatch(r"[–ê-–ØA-Z]{1,2}\d{3}[–ê-–ØA-Z]{2}\d{2,3}", number):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: –ê123–í–°77")
        return
    await state.update_data(number=number)
    await state.set_state(AddCar.year)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –º–∞—à–∏–Ω—ã")

@router.message(AddCar.year)
async def add_car_finish(message: Message, state: FSMContext):
    if message.text == "–í –º–µ–Ω—é":
        await go_menu(message, state)
        return
    year_text = message.text.strip()
    if not year_text.isdigit():
        await message.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2015")
        return

    year = int(year_text)
    if year < 1900 or year > 2100:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1900 –¥–æ 2100.")
        return
    await state.update_data(year=year)
    data = await state.get_data()

    await message.answer(
        f"–î–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É:\n"
        f"–ë—Ä–µ–Ω–¥: {data['brand']}\n"
        f"–ú–æ–¥–µ–ª—å: {data['model']}\n"
        f"–ù–æ–º–µ—Ä: {data['number']}\n"
        f"–ì–æ–¥: {data['year']}"
    )
    await state.clear()
    add_car = await add_car_request(data)
    if add_car:
        await message.answer("–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã")

@router.message(EditCar.check, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_cars(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)

@router.callback_query(EditCar.check, F.data.startswith("delete_car:"))
async def delete_car_callback(call: CallbackQuery, state: FSMContext):
    car_id = int(call.data.split(":")[1])
    await state.clear()
    response = await delete_car_request(car_id)
    if response:
        await call.message.answer("–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        await call.message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)
    else:
        await call.message.answer("–æ—à–∏–±–∫–∞")

@router.message(StateFilter("*"), F.text=="–í –º–µ–Ω—é")
async def go_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)