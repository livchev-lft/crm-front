import re

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bots.telegram.async_requests.client_async_requests import replace_phone_request, client_check, check_cars, post_app_request
from bots.telegram.client.handlers.menu import CreateApp
from bots.telegram.client.kb import repair_choice, tg_or_phone, yes_no_phone, client_start_menu
from bots.telegram.admin.handlers.app import send_for_admin
router = Router()

@router.callback_query(CreateApp.choose_car, F.data.startswith("choose_car:"))
async def handle_car_choice(call: CallbackQuery, state: FSMContext):
    car_id = int(call.data.split(":")[1])
    client_id = call.from_user.id
    cars = await check_cars(client_id)
    car = next((c for c in cars if c["id"] == car_id), None)
    if car:
        await call.answer()
        await process_chosen_car(call.message, car, state)
    else:
        await call.answer("–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

async def process_chosen_car(message: Message, car: dict, state: FSMContext):
    await state.update_data(car_id=car['id'])
    await state.set_state(CreateApp.start)
    await message.answer(
        f"<b>–í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞:</b>\n"
        f"<b>–ú–∞—Ä–∫–∞:</b> {car['brand']}\n"
        f"<b>–ú–æ–¥–µ–ª—å:</b> {car['model']}\n"
        f"<b>–ù–æ–º–µ—Ä:</b> {car['number']}\n"
        f"<b>–ì–æ–¥:</b> {car['year']}",
        parse_mode="HTML"
    )
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ", reply_markup=repair_choice)

@router.message(CreateApp.start)
async def conn_apply(message: Message, state: FSMContext):
    await state.update_data(client_id=message.from_user.id)
    await state.update_data(problem=message.text)
    await message.answer("–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è", reply_markup=tg_or_phone)
    await state.set_state(CreateApp.connect_apply)

@router.message(CreateApp.connect_apply, F.text == "Telegram")
async def apply_tg(message: Message, state: FSMContext):
    await state.update_data(conn = 0)
    data = await state.get_data()
    response = await post_app_request(data)
    if response:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ")
        await send_for_admin(response["id"], message)
        await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)
        await state.clear()
    else:
        await message.answer("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
        await state.clear()
        await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)

@router.message(CreateApp.connect_apply, F.text == "üìû–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
async def apply_number(message: Message, state: FSMContext):
    await state.update_data(conn = 1)
    await state.set_state(CreateApp.phone_apply)
    check = await client_check(client_id=message.from_user.id)
    await message.answer(f"–≠—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?\n"
                         f"{check['phone']}\n", reply_markup=yes_no_phone)

@router.callback_query(CreateApp.phone_apply, F.data == "yes_phone")
async def yes_phone(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    response = await post_app_request(data)
    if response:
        await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ")
        await send_for_admin(response["id"], call.message)
        await call.message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)
        await state.clear()
    else:
        await call.message.answer("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
        await state.clear()
        await call.message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)

@router.callback_query(CreateApp.phone_apply, F.data == "no_phone")
async def edit_phone(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999")
    await state.set_state(CreateApp.edit_phone)

@router.message(CreateApp.edit_phone)
async def post_edit_phone_and_app(message: Message, state: FSMContext):
    phone_regex = r"^\+7\d{10}$"
    phone = message.text.strip()
    if not re.match(phone_regex, phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567")
        return
    await state.update_data(phone=phone)
    await state.update_data(conn = 1)
    await replace_phone_request(client_id = message.from_user.id, phone = phone)
    data = await state.get_data()
    response = await post_app_request(data)
    if response:
        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ")
        await send_for_admin(response["id"], message)
        await state.clear()
        await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)
    else:
        await message.answer("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
        await state.clear()
        await message.answer("–ú–µ–Ω—é", reply_markup=client_start_menu)

